/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rook/rook/pkg/apis/yugabytedb.rook.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// YugabyteDBClusterLister helps list YugabyteDBClusters.
type YugabyteDBClusterLister interface {
	// List lists all YugabyteDBClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.YugabyteDBCluster, err error)
	// YugabyteDBClusters returns an object that can list and get YugabyteDBClusters.
	YugabyteDBClusters(namespace string) YugabyteDBClusterNamespaceLister
	YugabyteDBClusterListerExpansion
}

// yugabyteDBClusterLister implements the YugabyteDBClusterLister interface.
type yugabyteDBClusterLister struct {
	indexer cache.Indexer
}

// NewYugabyteDBClusterLister returns a new YugabyteDBClusterLister.
func NewYugabyteDBClusterLister(indexer cache.Indexer) YugabyteDBClusterLister {
	return &yugabyteDBClusterLister{indexer: indexer}
}

// List lists all YugabyteDBClusters in the indexer.
func (s *yugabyteDBClusterLister) List(selector labels.Selector) (ret []*v1alpha1.YugabyteDBCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.YugabyteDBCluster))
	})
	return ret, err
}

// YugabyteDBClusters returns an object that can list and get YugabyteDBClusters.
func (s *yugabyteDBClusterLister) YugabyteDBClusters(namespace string) YugabyteDBClusterNamespaceLister {
	return yugabyteDBClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// YugabyteDBClusterNamespaceLister helps list and get YugabyteDBClusters.
type YugabyteDBClusterNamespaceLister interface {
	// List lists all YugabyteDBClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.YugabyteDBCluster, err error)
	// Get retrieves the YugabyteDBCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.YugabyteDBCluster, error)
	YugabyteDBClusterNamespaceListerExpansion
}

// yugabyteDBClusterNamespaceLister implements the YugabyteDBClusterNamespaceLister
// interface.
type yugabyteDBClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all YugabyteDBClusters in the indexer for a given namespace.
func (s yugabyteDBClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.YugabyteDBCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.YugabyteDBCluster))
	})
	return ret, err
}

// Get retrieves the YugabyteDBCluster from the indexer for a given namespace and name.
func (s yugabyteDBClusterNamespaceLister) Get(name string) (*v1alpha1.YugabyteDBCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("yugabytedbcluster"), name)
	}
	return obj.(*v1alpha1.YugabyteDBCluster), nil
}
